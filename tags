!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	0	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
RV_H	rv.h	2;"	d
main	main.cpp	/^int main()$/;"	f
EV_H	event.h	2;"	d
Event	event.h	/^struct Event {$/;"	s
time	event.h	/^  double time;            \/\/ Time at which Event takes place$/;"	m	struct:Event
type	event.h	/^  int type;               \/\/ Type of Event$/;"	m	struct:Event
next	event.h	/^  Event* next;            \/\/ Points to next event in list$/;"	m	struct:Event
Event	event.h	/^  Event(double t, int i) {$/;"	f	struct:Event
EventList	event.h	/^class EventList {$/;"	c
head	event.h	/^  Event* head;           \/\/ Points to first Event in EventList$/;"	m	class:EventList
event_count	event.h	/^  int event_count;       \/\/ Total number of Events in EventList$/;"	m	class:EventList
~EventList	event.h	/^  ~EventList() { clear();}$/;"	f	class:EventList
EventList	event.h	/^  EventList() { event_count = 0; head = 0;}$/;"	f	class:EventList
insert	event.cpp	/^void EventList::insert(double time, int type)$/;"	f	class:EventList
get	event.cpp	/^Event* EventList::get()$/;"	f	class:EventList
clear	event.cpp	/^void EventList::clear()$/;"	f	class:EventList
remove	event.cpp	/^Event* EventList::remove(int type)$/;"	f	class:EventList
Seed	rv.cpp	/^double Seed = 1111.0;$/;"	v
uni_rv	rv.cpp	/^double uni_rv()           $/;"	f
exp_rv	rv.cpp	/^double exp_rv(double lambda)$/;"	f
CC	Makefile	/^CC = \/usr\/bin\/g++$/;"	m
CFLAGS	Makefile	/^CFLAGS = $/;"	m
LIBS	Makefile	/^LIBS = -lm$/;"	m
